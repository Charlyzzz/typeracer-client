// Code generated by protoc-gen-go. DO NOT EDIT.
// source: typeracer.proto

package typeracer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlayerMetrics struct {
	Username             string               `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	StrokesPerMinute     int32                `protobuf:"varint,2,opt,name=strokesPerMinute,proto3" json:"strokesPerMinute,omitempty"`
	ConnectionTime       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=connectionTime,proto3" json:"connectionTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PlayerMetrics) Reset()         { *m = PlayerMetrics{} }
func (m *PlayerMetrics) String() string { return proto.CompactTextString(m) }
func (*PlayerMetrics) ProtoMessage()    {}
func (*PlayerMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4c6564c4848df5, []int{0}
}

func (m *PlayerMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerMetrics.Unmarshal(m, b)
}
func (m *PlayerMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerMetrics.Marshal(b, m, deterministic)
}
func (m *PlayerMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMetrics.Merge(m, src)
}
func (m *PlayerMetrics) XXX_Size() int {
	return xxx_messageInfo_PlayerMetrics.Size(m)
}
func (m *PlayerMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMetrics proto.InternalMessageInfo

func (m *PlayerMetrics) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PlayerMetrics) GetStrokesPerMinute() int32 {
	if m != nil {
		return m.StrokesPerMinute
	}
	return 0
}

func (m *PlayerMetrics) GetConnectionTime() *timestamp.Timestamp {
	if m != nil {
		return m.ConnectionTime
	}
	return nil
}

type Scoreboard struct {
	Reply                []*PlayerMetrics `protobuf:"bytes,1,rep,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Scoreboard) Reset()         { *m = Scoreboard{} }
func (m *Scoreboard) String() string { return proto.CompactTextString(m) }
func (*Scoreboard) ProtoMessage()    {}
func (*Scoreboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4c6564c4848df5, []int{1}
}

func (m *Scoreboard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scoreboard.Unmarshal(m, b)
}
func (m *Scoreboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scoreboard.Marshal(b, m, deterministic)
}
func (m *Scoreboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scoreboard.Merge(m, src)
}
func (m *Scoreboard) XXX_Size() int {
	return xxx_messageInfo_Scoreboard.Size(m)
}
func (m *Scoreboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Scoreboard.DiscardUnknown(m)
}

var xxx_messageInfo_Scoreboard proto.InternalMessageInfo

func (m *Scoreboard) GetReply() []*PlayerMetrics {
	if m != nil {
		return m.Reply
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerMetrics)(nil), "typeracer.PlayerMetrics")
	proto.RegisterType((*Scoreboard)(nil), "typeracer.Scoreboard")
}

func init() { proto.RegisterFile("typeracer.proto", fileDescriptor_bf4c6564c4848df5) }

var fileDescriptor_bf4c6564c4848df5 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x8d, 0x63, 0x62, 0xdf, 0xe1, 0xbf, 0x80, 0x50, 0x7a, 0xb1, 0xf4, 0x54, 0x3c, 0x64,
	0x52, 0xaf, 0x9e, 0x3c, 0x0a, 0x83, 0x91, 0x15, 0x3c, 0xa7, 0xd9, 0xeb, 0x08, 0xb6, 0x49, 0x78,
	0x93, 0x1e, 0xfa, 0x59, 0xfc, 0xb2, 0xe2, 0xca, 0x36, 0xa7, 0xec, 0x98, 0xe7, 0x79, 0xf2, 0xf2,
	0xfb, 0xc1, 0x4d, 0x1c, 0x3c, 0x92, 0xd2, 0x48, 0xc2, 0x93, 0x8b, 0x8e, 0x27, 0xfb, 0x20, 0x7b,
	0xd8, 0x38, 0xb7, 0x69, 0x71, 0xbe, 0x2d, 0x9a, 0xfe, 0x63, 0x1e, 0x4d, 0x87, 0x21, 0xaa, 0xce,
	0x8f, 0xdb, 0xe2, 0x8b, 0xc1, 0xd5, 0xb2, 0x55, 0x03, 0xd2, 0x02, 0x23, 0x19, 0x1d, 0x78, 0x06,
	0x97, 0x7d, 0x40, 0xb2, 0xaa, 0xc3, 0x94, 0xe5, 0xac, 0x4c, 0xe4, 0xfe, 0xcd, 0x1f, 0xe1, 0x36,
	0x44, 0x72, 0x9f, 0x18, 0x96, 0x48, 0x0b, 0x63, 0xfb, 0x88, 0xe9, 0x79, 0xce, 0xca, 0xa9, 0xfc,
	0x97, 0xf3, 0x57, 0xb8, 0xd6, 0xce, 0x5a, 0xd4, 0xd1, 0x38, 0x5b, 0x9b, 0x0e, 0xd3, 0x49, 0xce,
	0xca, 0x59, 0x95, 0x89, 0x91, 0x49, 0xec, 0x98, 0x44, 0xbd, 0x63, 0x92, 0x7f, 0x7e, 0x14, 0x2f,
	0x00, 0x2b, 0xed, 0x08, 0x1b, 0xa7, 0x68, 0xcd, 0x05, 0x4c, 0x09, 0x7d, 0x3b, 0xa4, 0x2c, 0x9f,
	0x94, 0xb3, 0x2a, 0x15, 0x07, 0xf1, 0x23, 0x05, 0x39, 0xce, 0xaa, 0x77, 0x48, 0xea, 0xc1, 0xa3,
	0xfc, 0x59, 0xf0, 0x37, 0xb8, 0x5b, 0xa1, 0x5d, 0x1f, 0xbb, 0x9e, 0x3c, 0x91, 0xdd, 0xff, 0x6a,
	0x0e, 0x08, 0xc5, 0x59, 0xc9, 0x9e, 0x58, 0x73, 0xb1, 0x45, 0x7f, 0xfe, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0xb7, 0x4b, 0xd7, 0x7a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TypeRacerClient is the client API for TypeRacer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TypeRacerClient interface {
	SendPlayerMetrics(ctx context.Context, opts ...grpc.CallOption) (TypeRacer_SendPlayerMetricsClient, error)
}

type typeRacerClient struct {
	cc *grpc.ClientConn
}

func NewTypeRacerClient(cc *grpc.ClientConn) TypeRacerClient {
	return &typeRacerClient{cc}
}

func (c *typeRacerClient) SendPlayerMetrics(ctx context.Context, opts ...grpc.CallOption) (TypeRacer_SendPlayerMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TypeRacer_serviceDesc.Streams[0], "/typeracer.TypeRacer/SendPlayerMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &typeRacerSendPlayerMetricsClient{stream}
	return x, nil
}

type TypeRacer_SendPlayerMetricsClient interface {
	Send(*PlayerMetrics) error
	Recv() (*Scoreboard, error)
	grpc.ClientStream
}

type typeRacerSendPlayerMetricsClient struct {
	grpc.ClientStream
}

func (x *typeRacerSendPlayerMetricsClient) Send(m *PlayerMetrics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *typeRacerSendPlayerMetricsClient) Recv() (*Scoreboard, error) {
	m := new(Scoreboard)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TypeRacerServer is the server API for TypeRacer service.
type TypeRacerServer interface {
	SendPlayerMetrics(TypeRacer_SendPlayerMetricsServer) error
}

// UnimplementedTypeRacerServer can be embedded to have forward compatible implementations.
type UnimplementedTypeRacerServer struct {
}

func (*UnimplementedTypeRacerServer) SendPlayerMetrics(srv TypeRacer_SendPlayerMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPlayerMetrics not implemented")
}

func RegisterTypeRacerServer(s *grpc.Server, srv TypeRacerServer) {
	s.RegisterService(&_TypeRacer_serviceDesc, srv)
}

func _TypeRacer_SendPlayerMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TypeRacerServer).SendPlayerMetrics(&typeRacerSendPlayerMetricsServer{stream})
}

type TypeRacer_SendPlayerMetricsServer interface {
	Send(*Scoreboard) error
	Recv() (*PlayerMetrics, error)
	grpc.ServerStream
}

type typeRacerSendPlayerMetricsServer struct {
	grpc.ServerStream
}

func (x *typeRacerSendPlayerMetricsServer) Send(m *Scoreboard) error {
	return x.ServerStream.SendMsg(m)
}

func (x *typeRacerSendPlayerMetricsServer) Recv() (*PlayerMetrics, error) {
	m := new(PlayerMetrics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TypeRacer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "typeracer.TypeRacer",
	HandlerType: (*TypeRacerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPlayerMetrics",
			Handler:       _TypeRacer_SendPlayerMetrics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "typeracer.proto",
}

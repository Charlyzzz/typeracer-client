// Code generated by protoc-gen-go. DO NOT EDIT.
// source: typeracer.proto

package typeracer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PlayerMetrics struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	StrokesPerMinute     int32    `protobuf:"varint,2,opt,name=strokesPerMinute,proto3" json:"strokesPerMinute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerMetrics) Reset()         { *m = PlayerMetrics{} }
func (m *PlayerMetrics) String() string { return proto.CompactTextString(m) }
func (*PlayerMetrics) ProtoMessage()    {}
func (*PlayerMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4c6564c4848df5, []int{0}
}

func (m *PlayerMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerMetrics.Unmarshal(m, b)
}
func (m *PlayerMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerMetrics.Marshal(b, m, deterministic)
}
func (m *PlayerMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerMetrics.Merge(m, src)
}
func (m *PlayerMetrics) XXX_Size() int {
	return xxx_messageInfo_PlayerMetrics.Size(m)
}
func (m *PlayerMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerMetrics proto.InternalMessageInfo

func (m *PlayerMetrics) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PlayerMetrics) GetStrokesPerMinute() int32 {
	if m != nil {
		return m.StrokesPerMinute
	}
	return 0
}

type Scoreboard struct {
	Reply                []*PlayerMetrics `protobuf:"bytes,1,rep,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Scoreboard) Reset()         { *m = Scoreboard{} }
func (m *Scoreboard) String() string { return proto.CompactTextString(m) }
func (*Scoreboard) ProtoMessage()    {}
func (*Scoreboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf4c6564c4848df5, []int{1}
}

func (m *Scoreboard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scoreboard.Unmarshal(m, b)
}
func (m *Scoreboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scoreboard.Marshal(b, m, deterministic)
}
func (m *Scoreboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scoreboard.Merge(m, src)
}
func (m *Scoreboard) XXX_Size() int {
	return xxx_messageInfo_Scoreboard.Size(m)
}
func (m *Scoreboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Scoreboard.DiscardUnknown(m)
}

var xxx_messageInfo_Scoreboard proto.InternalMessageInfo

func (m *Scoreboard) GetReply() []*PlayerMetrics {
	if m != nil {
		return m.Reply
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerMetrics)(nil), "PlayerMetrics")
	proto.RegisterType((*Scoreboard)(nil), "Scoreboard")
}

func init() { proto.RegisterFile("typeracer.proto", fileDescriptor_bf4c6564c4848df5) }

var fileDescriptor_bf4c6564c4848df5 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x4f, 0x3d, 0xab, 0xc2, 0x30,
	0x14, 0x25, 0xef, 0xd1, 0x47, 0xdf, 0x2d, 0xef, 0x83, 0x4c, 0xa5, 0x53, 0x29, 0x0e, 0xc1, 0x21,
	0x48, 0xdd, 0xfc, 0x0f, 0x85, 0x92, 0x0a, 0xce, 0x69, 0x7a, 0x87, 0x62, 0x6d, 0xc2, 0x4d, 0x3a,
	0xe4, 0xdf, 0x0b, 0x8a, 0x8a, 0x3a, 0x9e, 0x73, 0x38, 0x5f, 0xf0, 0x17, 0xa2, 0x43, 0xd2, 0x06,
	0x49, 0x3a, 0xb2, 0xc1, 0x56, 0x07, 0xf8, 0x69, 0x27, 0x1d, 0x91, 0x1a, 0x0c, 0x34, 0x1a, 0xcf,
	0x0b, 0x48, 0x17, 0x8f, 0x34, 0xeb, 0x13, 0xe6, 0xac, 0x64, 0xe2, 0x5b, 0xdd, 0x31, 0x5f, 0xc3,
	0xbf, 0x0f, 0x64, 0x8f, 0xe8, 0x5b, 0xa4, 0x66, 0x9c, 0x97, 0x80, 0xf9, 0x47, 0xc9, 0x44, 0xa2,
	0xde, 0xf8, 0xaa, 0x06, 0xe8, 0x8c, 0x25, 0xec, 0xad, 0xa6, 0x81, 0xaf, 0x20, 0x21, 0x74, 0x53,
	0xcc, 0x59, 0xf9, 0x29, 0xb2, 0xfa, 0x57, 0x3e, 0x95, 0xaa, 0xab, 0x58, 0xef, 0x20, 0xdd, 0x47,
	0x87, 0x4a, 0x1b, 0xe4, 0x12, 0xb2, 0x0e, 0xe7, 0xe1, 0x36, 0xeb, 0xc5, 0x51, 0x64, 0xf2, 0x91,
	0x2e, 0xd8, 0x86, 0xf5, 0x5f, 0x97, 0x3f, 0xdb, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0xfb,
	0xc8, 0x46, 0xe2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TypeRaceClient is the client API for TypeRace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TypeRaceClient interface {
	SendMetrics(ctx context.Context, opts ...grpc.CallOption) (TypeRace_SendMetricsClient, error)
}

type typeRaceClient struct {
	cc *grpc.ClientConn
}

func NewTypeRaceClient(cc *grpc.ClientConn) TypeRaceClient {
	return &typeRaceClient{cc}
}

func (c *typeRaceClient) SendMetrics(ctx context.Context, opts ...grpc.CallOption) (TypeRace_SendMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TypeRace_serviceDesc.Streams[0], "/TypeRace/SendMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &typeRaceSendMetricsClient{stream}
	return x, nil
}

type TypeRace_SendMetricsClient interface {
	Send(*PlayerMetrics) error
	Recv() (*Scoreboard, error)
	grpc.ClientStream
}

type typeRaceSendMetricsClient struct {
	grpc.ClientStream
}

func (x *typeRaceSendMetricsClient) Send(m *PlayerMetrics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *typeRaceSendMetricsClient) Recv() (*Scoreboard, error) {
	m := new(Scoreboard)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TypeRaceServer is the server API for TypeRace service.
type TypeRaceServer interface {
	SendMetrics(TypeRace_SendMetricsServer) error
}

// UnimplementedTypeRaceServer can be embedded to have forward compatible implementations.
type UnimplementedTypeRaceServer struct {
}

func (*UnimplementedTypeRaceServer) SendMetrics(srv TypeRace_SendMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMetrics not implemented")
}

func RegisterTypeRaceServer(s *grpc.Server, srv TypeRaceServer) {
	s.RegisterService(&_TypeRace_serviceDesc, srv)
}

func _TypeRace_SendMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TypeRaceServer).SendMetrics(&typeRaceSendMetricsServer{stream})
}

type TypeRace_SendMetricsServer interface {
	Send(*Scoreboard) error
	Recv() (*PlayerMetrics, error)
	grpc.ServerStream
}

type typeRaceSendMetricsServer struct {
	grpc.ServerStream
}

func (x *typeRaceSendMetricsServer) Send(m *Scoreboard) error {
	return x.ServerStream.SendMsg(m)
}

func (x *typeRaceSendMetricsServer) Recv() (*PlayerMetrics, error) {
	m := new(PlayerMetrics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TypeRace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TypeRace",
	HandlerType: (*TypeRaceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMetrics",
			Handler:       _TypeRace_SendMetrics_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "typeracer.proto",
}
